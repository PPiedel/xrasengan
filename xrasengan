# -*- mode: sh -*-

#
# Copyright 2014 Geyslan G. Bem
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# xrasengan - An xrandr wrapper to make your multi-monitor setup easier
#

#!/bin/bash

script=xrasengan
xrandr=$(which xrandr 2> /dev/null)
awk=$(which awk 2> /dev/null)
notifier=$(which notify-send 2> /dev/null)
force=""

if ! [ -x "$xrandr" ]; then
	echo "$script uses xrandr. Please, install it"
	exit 2
fi

if ! [ -x "$awk" ]; then
	echo "$script uses awk. Please, install it"
	exit 2
fi

if ! [ -x "$notifier" ]; then
	notifier="echo"
else
	notifier="$notifier -i /usr/share/icons/elementary/devices/64/video-display.svg"
fi

notify() {
	$notifier "$@"
}

error_clone="clone option demands one or two outputs
When one: all connected outputs will be a clone of the informed output
  $0 --clone HDMI-0

When two: the second output will be a clone of the first
  $0 -c HDMI-0 HDMI-1"

error_turn_on="turn-on option demands one or two arguments
When one: the informed output will be turned on with xrandr --auto option
  $0 --turn-on HDMI-0
When two: the informed output will be turned on with the informed --mode
  $0 -on DisplayPort-0 1920x1080"

error_turn_off="turn-off option demands one argument
The informed output will be turned off with xrandr --off option
  $0 --turn-off HDMI-0
Or
  $0 -off DisplayPort-0"

error_left="left option demands two arguments
First is the base output, second is the one to be on the left side of the base output
Here, HDMI-0 is the base and DVI-1 the left
  $0 --left HDMI-0 DVI-1"

error_left="right option demands two arguments
First is the base output, second is the one to be on the right side of the base output
Here, HDMI-0 is the base and DVI-1 the right
  $0 --right HDMI-0 DVI-1"


invalid_argument() {
	echo "$@"
	exit 22
}

list_contains() {
	local list=$1
	local value=$2

	for word in $list; do
		[ $word == $value ] && return 0
	done
	return 1
}

update_outputs_all() {
	outputs_all=$($xrandr | $awk '/connected/ {print $1}')
}

update_outputs_all_num() {
	outputs_all_num=$(echo $outputs_all | wc -w)
}

update_outputs_connected() {
	if ! [[ $force ]]; then
		outputs_connected=$($xrandr | $awk '/ connected/ {print $1}')
		return
	fi

	# Workaround to turn on connected outputs that may be in suspend mode
	# and hence shown as disconnected
	local times=2
	local seconds=1

	if [ $1 ]; then
		times=$1
	fi

	if [ $2 ]; then
		seconds=$2
	fi

	while [ $times -gt 0 ]; do
		$xrandr 1> /dev/null
		sleep $seconds
		let times-=1
	done

	outputs_connected=$($xrandr | $awk '/ connected/ {print $1}')
}

update_outputs_active() {
	# outputs_active=$($xrandr | $awk '/[0-9] \(/ {print $1}')
	outputs_active=$($xrandr | $awk '/mm$/ {print $1}')
}

update_outputs_active_num() {
	outputs_active_num=$(echo $outputs_active | wc -w)
}

update_outputs_disconnected() {
	outputs_disconnected=$($xrandr | $awk '/disconnected/ {print $1}')
}

is_mode_available() {
	if ! [ $1 ] || ! [ $2 ]; then
		invalid_argument "${FUNCNAME[0]}: needs two arguments (output and mode)"
	fi

	local output=$1
	local modes=$($xrandr | $awk '/'"$output"'/{f=1;next} !/^ /{f=0} f {print $1}')

	if ! list_contains "$modes" $2; then
		return 1
	else
		return 0
	fi
}

check_output_valid() {
	if ! [ $1 ]; then
		invalid_argument "${FUNCNAME[0]}: needs one argument"
	fi

	if ! list_contains "$outputs_all" $1; then
		return 1
	else
		return 0
	fi
}

check_output_connected() {
	if ! [ $1 ]; then
		invalid_argument "${FUNCNAME[0]}: needs one argument"
	fi

	if ! check_output_valid $1; then
		invalid_argument "$1 is not a valid output"
	fi

	if ! list_contains "$outputs_connected" $1; then
		return 1
	else
		return 0
	fi
}

check_output_active() {
	if ! [ $1 ]; then
		invalid_argument "${FUNCNAME[0]}: needs one argument"
	fi

	if ! check_output_connected $1; then
		invalid_argument "$1 is not a connected output"
	fi

	if ! list_contains "$outputs_active" $1; then
		return 1
	else
		return 0
	fi
}

clone() {
	if [ $# -eq 0 ] || [ $# -gt 2 ]; then
		invalid_argument "$error_clone"
	fi

	if ! check_output_active $1; then
		invalid_argument "$1 is not an active output"
	fi

	if [ $2 ]; then
		check_output_connected $2
		$xrandr --output $2 --auto --same-as $1 --auto
	else
		$xrandr --output $1 --primary
		for output in $outputs_connected
		do
			if [ $output != $1 ]; then
				$xrandr --output $output --auto --same-as $1 --auto
			fi
		done
	fi
}

turn_on() {
	if [ $# -eq 0 ] || [ $# -gt 2 ]; then
		invalid_argument "$error_turn_on"
	fi

	if check_output_active $1; then
		invalid_argument "$1 is already an active output"
	fi

	if [ $2 ]; then
		if ! is_mode_available $1 $2; then
			invalid_argument "$2 is not an available mode for $1 output"
		fi
		$xrandr --output $1 --mode $2 --auto
	else
		$xrandr --output $1 --auto
	fi
}

turn_off() {
	if [ $# -ne 1 ]; then
		invalid_argument "$error_turn_off"
	fi

	if ! check_output_active $1; then
		invalid_argument "$1 is already an inactive output"
	fi

	if [ $outputs_active_num -eq 1 ]; then
		invalid_argument "$1 is the unique active output. It's impossible to turn it off"
	fi

	$xrandr --output $1 --off
}

left() {
	if [ $# -ne 2 ]; then
		invalid_argument "$error_left"
	fi

	if ! check_output_active $1; then
		invalid_argument "$1 is not an active output"
	fi

	check_output_connected $2
	$xrandr --output $2 --auto --left-of $1 --auto
}

right() {
	if [ $# -ne 2 ]; then
		invalid_argument "$error_right"
	fi

	if ! check_output_active $1; then
		invalid_argument "$1 is not an active output"
	fi

	check_output_connected $2
	$xrandr --output $2 --auto --right-of $1 --auto
}

usage() {
	echo "Usage: $0 (implement)"
}

if list_contains "$*" "--force" || list_contains "$*" "-f"; then
	set -- ${@/$arg/};
	force="force";
fi

update_outputs_all
update_outputs_all_num

if [ $outputs_all_num -eq 1 ]; then
	notify "You have only one output! $script can't do nothing for you! Bye!"
	exit 0
fi

while [[ $# -ge 1 ]]
do
	key="$1"
	shift

	update_outputs_connected
	update_outputs_disconnected
	update_outputs_active
	update_outputs_active_num

	case $key in
	--list-all | -la)
		echo "$outputs_all"
		;;
	--list-connected | -lc)
		echo "$outputs_connected"
		;;
	--list-active | -lac)
		echo "$outputs_active"
		;;
	--list-disconnected | -ld)
		echo "$outputs_disconnected"
		;;
	--clone | -c)
		clone $1 $2
		notify "$2 is clone of $1"
		shift 2
		;;
	--turn-on | -on)
		turn_on $1 $2
		notify "$1 turned on"
		shift 2
		;;
	--turn-off | -off)
		turn_off $1
		notify "$1 turned off"
		shift
		;;
	--left | -l)
		left $1 $2
		notify "$2 is on left of $1"
		shift 2
		;;
	--right | -r)
		right $1 $2
		notify "$2 is on right of $1"
		shift 2
		;;
	--above | -a)
		;;
	--below | -b)
		;;
	--primary | -p)
		;;
	--help | -h | *)
		usage
		break
		;;
	esac
done
